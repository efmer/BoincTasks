void CDlgSearchComputers::Search()
{
	CString strTemp, sHostName;
	struct hostent *host;
	struct in_addr *ptr;	// To retrieve the IP Address
	char szHostName[MAX_PATH];

	CWaitCursor wc;
    LPNETRESOURCE lpnr = NULL;
    DWORD dwResult, dwResultEnum;
    HANDLE hEnum;
    DWORD cbBuffer = 16384;     // 16K is a good size
    DWORD cEntries = -1;        // enumerate all possible entries
    LPNETRESOURCE lpnrLocal;    // pointer to enumerated structures
    DWORD i;

	m_listComputers.DeleteAllItems();

    //
    // Call the WNetOpenEnum function to begin the enumeration.
    //
    dwResult = WNetOpenEnum(RESOURCE_CONTEXT, 
                            RESOURCETYPE_ANY,   // all resources
                            0,  // enumerate all resources
                            lpnr,       // NULL first time the function is called
                            &hEnum);    // handle to the resource

    if (dwResult != NO_ERROR) return;

    //
    // Call the GlobalAlloc function to allocate resources.
    //
    lpnrLocal = (LPNETRESOURCE) GlobalAlloc(GPTR, cbBuffer);
    if (lpnrLocal == NULL)	return;
 
    do {
        //
        // Initialize the buffer.
        //
        ZeroMemory(lpnrLocal, cbBuffer);
        //
        // Call the WNetEnumResource function to continue
        //  the enumeration.
        //
        dwResultEnum = WNetEnumResource(hEnum,  // resource handle
                                        &cEntries,      // defined locally as -1
                                        lpnrLocal,      // LPNETRESOURCE
                                        &cbBuffer);     // buffer size
        //
        // If the call succeeds, loop through the structures.
        //
        if (dwResultEnum == NO_ERROR)
		{
            for (i = 0; i < cEntries; i++)
			{
                // Call an application-defined function to
                //  display the contents of the NETRESOURCE structures.
                //
//                DisplayStruct(i, &lpnrLocal[i]);

                // If the NETRESOURCE structure represents a container resource, 
                //  call the EnumerateFunc function recursively.

                if (RESOURCEUSAGE_CONTAINER == (lpnrLocal[i].dwUsage & RESOURCEUSAGE_CONTAINER))
				{
					if ( lpnrLocal[i].lpRemoteName )
					{
						CString strFullName = lpnrLocal[i].lpRemoteName;
						CString sFormat;
						if ( 0 == strFullName.Left(2).Compare("\\\\") )	strFullName = strFullName.Right(strFullName.GetLength()-2);
						gethostname( szHostName, MAX_PATH );
						sHostName = szHostName;
						host = gethostbyname(strFullName);
						if(host == NULL)
						{
							int iError = WSAGetLastError();

						    struct addrinfo *result = NULL;
							struct addrinfo *ptr = NULL;
							struct addrinfo hints;
							DWORD dwRetval;

							//--------------------------------
							// Setup the hints address info structure
							// which is passed to the getaddrinfo() function
							ZeroMemory( &hints, sizeof(hints) );
							hints.ai_family = AF_UNSPEC;
							hints.ai_socktype = SOCK_STREAM;
							hints.ai_protocol = IPPROTO_TCP;

							//--------------------------------
							// Call getaddrinfo(). If the call succeeds,
							// the result variable will hold a linked list
							// of addrinfo structures containing response
							// information
							dwRetval = getaddrinfo(strFullName, NULL, &hints, &result);
							if ( dwRetval != 0 )
							{
								sFormat = "";							
							}
							else
							{
								char *pString;
								// Eg. 211.40.35.76 split up like this.
								pString = (char*) result->ai_addr[0].sa_data;
								BYTE a = *(pString+2);
								BYTE b = *(pString+3);
								BYTE c = *(pString+4);
								BYTE d = *(pString+5);

								sFormat.Format("%d.%d.%d.%d",a,b,c,d);
							}
							freeaddrinfo(result);

						}
						else
						{
							ptr = (struct in_addr *) host->h_addr_list[0];

							// Eg. 211.40.35.76 split up like this.
							int a = ptr->S_un.S_un_b.s_b1;  // 211
							int b = ptr->S_un.S_un_b.s_b2;  // 40
							int c = ptr->S_un.S_un_b.s_b3;  // 35
							int d = ptr->S_un.S_un_b.s_b4;  // 76

							sFormat.Format("%d.%d.%d.%d",a,b,c,d);
						}

						strFullName.MakeLower();
						sHostName.MakeLower();
						if (sHostName == strFullName)
						{
							strFullName += " (localhost)";
						}

						m_listComputers.InsertItem(0,"");
						m_listComputers.SetItemText(0,0,strFullName);
						m_listComputers.SetItemText(0,1,sFormat);
						m_listComputers.SetItemState(0,INDEXTOSTATEIMAGEMASK(1),LVIS_STATEIMAGEMASK);

					}
				}
			}
        }
        // Process errors.
        //
        else
		{
			if (dwResultEnum != ERROR_NO_MORE_ITEMS)
			{
				printf("WNetEnumResource failed with error %d\n", dwResultEnum);
			}
			break;
        }
    }
    //
    // End do.
    //
    while (dwResultEnum != ERROR_NO_MORE_ITEMS);
    //
    // Call the GlobalFree function to free the memory.
    //
    GlobalFree((HGLOBAL) lpnrLocal);
    //
    // Call WNetCloseEnum to end the enumeration.
    //
    dwResult = WNetCloseEnum(hEnum);

 //   if (dwResult != NO_ERROR) return;
 //    return TRUE;

//	WSACleanup();

	m_listComputers.InsertItem(0,"");
	m_listComputers.SetItemText(0,0,"localhost");
	m_listComputers.SetItemText(0,1,"127.0.0.1");
	m_listComputers.SetItemState(0,INDEXTOSTATEIMAGEMASK(1),LVIS_STATEIMAGEMASK);
}